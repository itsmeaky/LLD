#include <iostream>
#include <unordered_map>
using namespace std;

class Node {
public:
    int key, value;
    Node* prev;
    Node* next;
    Node(int k, int v) : key(k), value(v), prev(nullptr), next(nullptr) {}
};

class LRUCache {
private:
    int capacity;
    unordered_map<int, Node*> cache;
    Node* head; // Most recently used
    Node* tail; // Least recently used

    void remove(Node* node) {
        if (!node) return;
        if (node->prev) node->prev->next = node->next;
        else head = node->next;

        if (node->next) node->next->prev = node->prev;
        else tail = node->prev;
    }

    void addToFront(Node* node) {
        node->next = head;
        node->prev = nullptr;
        if (head) head->prev = node;
        head = node;
        if (!tail) tail = head;
    }

public:
    LRUCache(int cap) {
        capacity = cap;
        head = nullptr;
        tail = nullptr;
    }

    int get(int key) {
        if (cache.find(key) == cache.end()) return -1;
        Node* node = cache[key];
        remove(node);
        addToFront(node);
        return node->value;
    }

    void put(int key, int value) {
        if (cache.find(key) != cache.end()) {
            Node* node = cache[key];
            node->value = value;
            remove(node);
            addToFront(node);
        } else {
            if (cache.size() >= capacity) {
                cache.erase(tail->key);
                remove(tail);
            }
            Node* node = new Node(key, value);
            addToFront(node);
            cache[key] = node;
        }
    }

    void printCache() {
        Node* curr = head;
        while (curr) {
            cout << "(" << curr->key << "," << curr->value << ") ";
            curr = curr->next;
        }
        cout << endl;
    }
};

int main() {
    LRUCache lru(3);
    lru.put(1, 100);
    lru.put(2, 200);
    lru.put(3, 300);
    lru.printCache(); // 3->2->1

    lru.get(2);
    lru.printCache(); // 2->3->1

    lru.put(4, 400); 
    lru.printCache(); // 4->2->3 (1 evicted)
    
    cout << lru.get(1) << endl; // -1
    cout << lru.get(3) << endl; // 300

    return 0;
}
